#!/usr/bin/python3.9
import re
import json
from classes.table import Table
from classes.itemlist import ItemList
from classes.item_bags import ItemBags


CURR_SUBCATEGORY = ''
id = 'bags'

def clear_text(title: str):
    syms = []
    for sym in title:
        if sym.isascii() == True:
            syms.append(sym)
        else:
            syms.append(' ')
    cleartitle = ''.join(syms)
    words = re.findall(r'\S+', cleartitle)
    res = []
    for word in words:
        lenght = len(re.findall(r'\W+', word))
        if lenght == 0 or len(re.findall(r'\W+', word)[0]) != len(word):
            res.append(word)
    return ' '.join(res).strip()



def get_items(data):
    items = []
    for item in data['result']['items']:
        title = item['title']
        if 'tags' in item:
            if title.find('üí∞') != -1:
                if len(item['imgsSrc']) > 2:
                    if len(re.findall(r'[^\scCm0-9:,.-]+', clear_text(title.split(":")[0]))) != 0:
                        if len(re.findall(r'([pPüí∞]\s?\d+)+', title)) < 2:
                            items.append(item)
    return items


def get_final_items(itemlist):
    imgs = dict()
    newlist = []
    val = []
    for it in itemlist:
        item = ItemBags(it, id)
        img = item.imgs
        price = item.price
        if img[0] not in imgs:
            val.append(price)
            imgs[f'{img[0]}'] = val.copy()
            newlist.append(it)
        elif price not in imgs[f'{img[0]}']:
            val.append(price)
            imgs[f'{img[0]}'] = val.copy()
            newlist.append(it)
        val.clear()
    return newlist


def get_description(text): 
        rustr = text.split('\n')
        findesc = []
        if len(rustr) > 1:
            findesc.append('<p>')
            for str in rustr:
                findesc.append('<span>')
                findesc.append(str)
                findesc.append('</span>')
            findesc.append('</p>')
        else:
            findesc.append('<p>')
            findesc.append('<span>')
            findesc.append(rustr[0])
            findesc.append('</span>')
            findesc.append('</p>')
        return ''.join(findesc)


def get_path_sub(subcat: str):
    with open('bc/path_clothes.json', 'r', encoding='utf8') as file:
        paths = json.load(file)
    result = 'None'
    for _sub in paths:
        if subcat == _sub:
            result = paths[f'{_sub}']
    return result
    

def new_product(item: ItemBags, translation: str, table: Table):
    global CURR_SUBCATEGORY

    sub_category = item.sub_category

    dic = dict()

    for i in range(1, 12):
        if i < len(item.imgs)+1:
            dic[f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ {i}'] = f'{item.imgs[i-1]}'
        else:
            dic[f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ {i}'] = ''

    if sub_category != CURR_SUBCATEGORY:
        CURR_SUBCATEGORY = sub_category
        table.new_subcategory(sub_category, get_path_sub(sub_category))

    data = {
        '–¢–∏–ø —Å—Ç—Ä–æ–∫–∏': 'product',
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': f'{item.name}',
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞': f'{item.item["mark_code"]}',
        '–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞': f'{item.article}',
        '–í–∞–ª—é—Ç–∞': 'CNY',
        '–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞': '1',
        '–í–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–µ': '1',
        '–ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞': '0',
        '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': f'{item.price}',
        '–û–ø–∏—Å–∞–Ω–∏–µ': f'{get_description(translation)}',
        '–í –Ω–∞–ª–∏—á–∏–∏ @–ù–∞–ª–∏—á–∏–µ –≤ –ú–æ—Å–∫–≤–µ': '0',
        '–°—Ç–∞—Ç—É—Å': '1',
        '–í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞': '2',
        '–¢–∏–ø —Ç–æ–≤–∞—Ä–æ–≤': f'–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        '–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏—Ç—Ä–∏–Ω—É': f'{item.article}',
        '–ë—Ä–µ–Ω–¥': f'{item.brand}',
        '–ü–æ–ª': '–£–Ω–∏—Å–µ–∫—Å',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 1': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 1")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 2': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 2")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 3': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 3")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 4': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 4")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 5': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 5")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 6': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 6")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 7': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 7")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 8': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 8")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 9': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 9")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 10': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 10")}',
        '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ 11': f'{dic.get("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ 11")}',
        '–î–∞—Ç–∞': f'{item.date}'
    }

    table.new_row(data)


def b_main(data, counter):
    
    global CURR_SUBCATEGORY

    table = Table((counter//100)+1, id)

    if counter == 1:
        table.create_table()
        table.new_category('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'accessories')
    
    i = counter
    if i // 100 > 0 and i == i//100 * 100:
        count = i // 100
        table.num = count + 1
        CURR_SUBCATEGORY = ''
        table.create_table()
        table.new_category('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'accessories')

    itemlist = get_items(data)
    if len(itemlist) != 0:
        final_itemlist = get_final_items(itemlist)
        items = ItemList(final_itemlist)

        for j in range(len(items.il)):
            item = ItemBags(items.il[j], id)
            new_product(item, items.tr[j], table)
    # print(i)


def main():
    pass


if __name__ == '__main__':
    main()